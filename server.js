import express from "express";
import mysql from "mysql2/promise";
import cors from "cors";
import dotenv from "dotenv";

dotenv.config();

const app = express();
app.use(express.json());

// ‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–¢–∏–ª—å–¥–∞)
const allowedOrigins = [
  "https://project16054216.tilda.ws",
  "http://project16054216.tilda.ws",
  "http://systemdental.tilda.ws"
];

// ‚úÖ CORS
app.use(
  cors({
    origin: function (origin, callback) {
      if (!origin || allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        callback(new Error("Not allowed by CORS"));
      }
    },
  })
);

// ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
const dbConfig = {
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_NAME,
  port: process.env.DB_PORT ? Number(process.env.DB_PORT) : 3306,
};

// ===============================
// üìò GET /get-patients ‚Äî –≤—ã–±–æ—Ä–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
// ===============================
app.get("/get-patients", async (req, res) => {
  try {
    if (process.env.API_KEY && req.query.api_key !== process.env.API_KEY) {
      return res.status(401).json({ error: "Unauthorized" });
    }

    const conn = await mysql.createConnection(dbConfig);

    const [rows] = await conn.execute(`
      SELECT 
        CONCAT(p.ptt_sername, ' ', p.ptt_name, ' ', IFNULL(p.ptt_patronymic, '')) AS –§–ò–û,
        p.ptt_tel AS –¢–µ–ª–µ—Ñ–æ–Ω,
        COUNT(v.vst_id) AS –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∏–∑–∏—Ç–æ–≤,
        p.ptt_birth AS –î–∞—Ç–∞_—Ä–æ–∂–¥–µ–Ω–∏—è,
        MAX(v.vst_date) AS –î–∞—Ç–∞_–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ_–≤–∏–∑–∏—Ç–∞,
        p.ptt_date_creation AS –î–∞—Ç–∞_–¥–æ–±–∞–≤–ª–µ–Ω–∏—è_–≤_—Å–∏—Å—Ç–µ–º—É
      FROM Patients p
      LEFT JOIN Visits v ON p.ptt_id = v.ptt_id_FK
      GROUP BY p.ptt_id, p.ptt_sername, p.ptt_name, p.ptt_patronymic, p.ptt_tel, p.ptt_birth, p.ptt_date_creation
      ORDER BY p.ptt_id
    `);

    await conn.end();
    res.json(rows);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ /get-patients:", err);
    res.status(500).json({ error: "Server error", detail: err.message });
  }
});

// ===============================
// ü¶∑ GET /get-visit-info ‚Äî –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∏–∑–∏—Ç–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
// ===============================
app.get("/get-visit-info", async (req, res) => {
  const { lastname, firstname, patronymic, api_key } = req.query;

  if (process.env.API_KEY && api_key !== process.env.API_KEY) {
    return res.status(401).json({ error: "Unauthorized" });
  }

  if (!lastname || !firstname) {
    return res.status(400).json({ error: "–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è" });
  }

  const conn = await mysql.createConnection(dbConfig);

  try {
    const [rows] = await conn.execute(
      `
      SELECT 
        CONCAT(ptt.ptt_sername, ' ', ptt.ptt_name, ' ', IFNULL(ptt.ptt_patronymic, '')) AS –§–ò–û_–ø–∞—Ü–∏–µ–Ω—Ç–∞,
        vss.vss_type AS –°—Ç–∞—Ç—É—Å_–≤–∏–∑–∏—Ç–∞,
        vst.vst_date AS –î–∞—Ç–∞_–≤–∏–∑–∏—Ç–∞,
        vst.vst_timestrart AS –ù–∞—á–∞–ª–æ_–≤–∏–∑–∏—Ç–∞,
        vst.vst_timeend AS –ö–æ–Ω–µ—Ü_–≤–∏–∑–∏—Ç–∞,
        CONCAT(emp.ele_sername, ' ', emp.ele_name, ' ', IFNULL(emp.ele_patronymic, '')) AS –§–ò–û_–≤—Ä–∞—á–∞,
        vte.vte_type AS –¢–∏–ø_–≤–∏–∑–∏—Ç–∞,
        vst.vst_note AS –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π_–∫_–≤–∏–∑–∏—Ç—É,
        ds.dse_name AS –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ_—É—Å–ª—É–≥–∏,
        vds.vds_quantity AS –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_—É—Å–ª—É–≥,
        vds.vds_discount AS –°–∫–∏–¥–∫–∞_–Ω–∞_—É—Å–ª—É–≥—É,
        ds.dse_price AS –¶–µ–Ω–∞_—É—Å–ª—É–≥–∏,
        vds.vds_total_amount AS –°—É–º–º–∞_–∑–∞_—É—Å–ª—É–≥—É,
        vst.vst_discount AS –°–∫–∏–¥–∫–∞_–Ω–∞_–≤–∏–∑–∏—Ç,
        vst.vst_final_sumservice AS –ò—Ç–æ–≥–æ–≤–∞—è_—Å—É–º–º–∞_–≤–∏–∑–∏—Ç–∞,
        pv.pvt_payment AS –ò—Ç–æ–≥–æ–≤–∞—è_—Å—É–º–º–∞_–æ–ø–ª–∞—Ç—ã_–≤–∏–∑–∏—Ç–∞,
        pm.pmd_name AS –°–ø–æ—Å–æ–±_–æ–ø–ª–∞—Ç—ã_–≤–∏–∑–∏—Ç–∞
      FROM Visits vst
      JOIN Patients ptt ON vst.ptt_id_FK = ptt.ptt_id
      JOIN Visit_Statuses vss ON vst.vss_id_FK = vss.vss_id
      JOIN Employees emp ON vst.ele_id_FK = emp.ele_id
      JOIN Visit_Types vte ON vst.vte_id_FK = vte.vte_id
      JOIN Visit_Dental_Services vds ON vst.vst_id = vds.vst_id_FK
      JOIN Dental_Services ds ON vds.dse_id_FK = ds.dse_id
      JOIN Paymet_Visits pv ON vst.vst_id = pv.vst_id_FK
      JOIN Payment_Methods pm ON pv.pmd_id_FK = pm.pmd_id
      WHERE ptt.ptt_sername = ? 
        AND ptt.ptt_name = ?
        AND (ptt.ptt_patronymic = ? OR ? IS NULL)
      ORDER BY vst.vst_date DESC
      `,
      [lastname, firstname, patronymic || null, patronymic || null]
    );

    await conn.end();
    res.json(rows);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ /get-visit-info:", err);
    res.status(500).json({ error: "Server error", detail: err.message });
  }
});

// ===============================
// ü©∫ POST / ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å —Ñ–æ—Ä–º—ã –¢–∏–ª—å–¥—ã
// ===============================
app.post("/", async (req, res) => {
  const data = req.body;
  const conn = await mysql.createConnection(dbConfig);

  try {
    await conn.beginTransaction();

    // 1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ Contract_Documents
    const [docResult] = await conn.execute(`
      INSERT INTO Contract_Documents (cdt_date_creation)
      VALUES (CURDATE())
    `);
    const contractId = docResult.insertId;

    // 2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
    const [patientResult] = await conn.execute(
      `
      INSERT INTO Patients (
        ptt_sername, ptt_name, ptt_patronymic, ptt_photo,
        ptt_birth, ptt_gender, ptt_tel, ptt_address, ptt_email,
        ptt_policyOMS, ptt_snils, ptt_passport_number, ptt_passport_series, ptt_date_of_issue,
        ptt_disability, ptt_allergy, ptt_diseases, ptt_complaints,
        ptt_date_creation, cdt_id_FK
      )
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURDATE(), ?)
    `,
      [
        data.lastname,
        data.firstname,
        data.patronymic || null,
        data.file || null,
        data.birthdate || null,
        data.gender || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        data.phone || null,
        data.address || null,
        data.email || null,
        data.oms || null,
        data.snils || null,
        data.pass_number || null,
        data.pass_series || null,
        data.pass_issued || null,
        data.disability || null,
        data.allergies || null,
        data.comorbid || null,
        data.complaints || null,
        contractId,
      ]
    );

    const patientId = patientResult.insertId;

    // 3Ô∏è‚É£ –ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚Äú–í–∑—Ä–æ—Å–ª—ã–π‚Äù = id 5)
    await conn.execute(
      `
      INSERT INTO Patient_Categories (ptt_id_FK, cty_id_FK)
      VALUES (?, ?)
    `,
      [patientId, 5]
    );

    // 4Ô∏è‚É£ –ï—Å–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω —Ñ–∞–π–ª (PDF –∏–ª–∏ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
    if (data.file && data.fileName) {
      await conn.execute(
        `
        INSERT INTO Documents (dct_name, dct_dateupload, dct_document, ptt_id_FK)
        VALUES (?, CURDATE(), ?, ?)
      `,
        [data.fileName, data.file, patientId]
      );
    }

    await conn.commit();
    res.status(200).json({ status: "ok", message: "–ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω" });
  } catch (err) {
    await conn.rollback();
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", detail: err.message });
  } finally {
    await conn.end();
  }
});




// ===============================
// üë®‚Äçüíº POST /add-employee ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Ñ–æ—Ä–º—ã
// ===============================
app.post("/add-employee", async (req, res) => {
  const data = req.body;
  const conn = await mysql.createConnection(dbConfig);

  try {
    await conn.beginTransaction();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    let positionId;
    const [positionRows] = await conn.execute(
      `SELECT psn_id FROM Positions WHERE psn_name = ?`,
      [data.position]
    );

    if (positionRows.length > 0) {
      positionId = positionRows[0].psn_id;
    } else {
      // –ï—Å–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
      const [newPosition] = await conn.execute(
        `INSERT INTO Positions (psn_name) VALUES (?)`,
        [data.position]
      );
      positionId = newPosition.insertId;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—É–≤–æ–ª–µ–Ω –∏–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω)
    const employeeStatus = data.dismissed ? 1 : 2; // 1 - –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, 2 - –∞–∫—Ç–∏–≤–µ–Ω

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–¥.–º–º.–≥–≥–≥–≥ –≤ –≥–≥–≥–≥-–º–º-–¥–¥
    let formattedBirthdate = null;
    if (data.birthdate) {
      const [day, month, year] = data.birthdate.split('.');
      formattedBirthdate = `${year}-${month}-${day}`;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –°–ù–ò–õ–° - —É–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const cleanSnils = data.snils ? data.snils.replace(/\D/g, '') : null;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const [employeeResult] = await conn.execute(
      `
      INSERT INTO Employees (
        ele_sername, ele_name, ele_patronymic, ele_photo,
        psn_id_FK, ele_snils, ele_birth, ele_tel, ele_email,
        ele_INN, ele_description, ess_id_FK
      )
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `,
      [
        data.lastname,
        data.firstname,
        data.patronymic || null,
        data.photo || null, // Base64 —Ñ–æ—Ç–æ
        positionId,
        cleanSnils,
        formattedBirthdate,
        data.phone ? data.phone.replace(/\D/g, '') : null, // –û—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        data.email || null,
        data.inn || null,
        data.description || null,
        employeeStatus
      ]
    );

    const employeeId = employeeResult.insertId;

    // –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, —Å–æ–∑–¥–∞—ë–º –¥–ª—è –Ω–µ–≥–æ —Ä–∞–±–æ—á–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if (data.show_in_schedule && !data.dismissed) {
      // –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤–æ–µ —Ä–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü
      const startDate = new Date();
      const endDate = new Date();
      endDate.setMonth(endDate.getMonth() + 1);

      const workSchedules = [];
      const currentDate = new Date(startDate);
      
      // –°–æ–∑–¥–∞—ë–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–ø–Ω-–ø—Ç)
      while (currentDate <= endDate) {
        const dayOfWeek = currentDate.getDay();
        // –ü–Ω-–ü—Ç (1-5) - —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
        if (dayOfWeek >= 1 && dayOfWeek <= 5) {
          const dateStr = currentDate.toISOString().split('T')[0];
          
          // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ Work_Schedules
          const [scheduleResult] = await conn.execute(
            `INSERT INTO Work_Schedules (wse_calend_numb, wse_workstart, wse_workend, swk_id_FK)
             VALUES (?, '09:00:00', '18:00:00', 2)`, // 2 - –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            [dateStr]
          );
          
          // –°–≤—è–∑—ã–≤–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
          await conn.execute(
            `INSERT INTO Employee_Work_Schedules (wse_id_FK, ele_id_FK)
             VALUES (?, ?)`,
            [scheduleResult.insertId, employeeId]
          );
        }
        currentDate.setDate(currentDate.getDate() + 1);
      }
    }

    await conn.commit();
    
    res.status(200).json({ 
      status: "success", 
      message: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
      employeeId: employeeId
    });
    
  } catch (err) {
    await conn.rollback();
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", err);
    res.status(500).json({ 
      error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", 
      detail: err.message 
    });
  } finally {
    await conn.end();
  }
});

// ===============================
// üë• GET /get-employees ‚Äî –≤—ã–±–æ—Ä–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
// ===============================
app.get("/get-employees", async (req, res) => {
  try {
    if (process.env.API_KEY && req.query.api_key !== process.env.API_KEY) {
      return res.status(401).json({ error: "Unauthorized" });
    }

    const conn = await mysql.createConnection(dbConfig);

    const [rows] = await conn.execute(`
      SELECT 
        e.ele_id AS ‚Ññ,
        CONCAT(e.ele_sername, ' ', e.ele_name, ' ', IFNULL(e.ele_patronymic, '')) AS –§–ò–û,
        p.psn_name AS –î–æ–ª–∂–Ω–æ—Å—Ç—å,
        e.ele_tel AS –¢–µ–ª–µ—Ñ–æ–Ω,
        e.ele_birth AS –î–∞—Ç–∞_—Ä–æ–∂–¥–µ–Ω–∏—è,
        CASE 
          WHEN e.ess_id_FK = 1 THEN '–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞'
          WHEN e.ess_id_FK = 2 THEN '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞'
          ELSE '–ü—Ä–∞–≤–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã'
        END AS –ù–∞–±–æ—Ä_–ø—Ä–∞–≤_–¥–æ—Å—Ç—É–ø–∞
      FROM Employees e
      JOIN Positions p ON e.psn_id_FK = p.psn_id
      ORDER BY e.ele_id
    `);

    await conn.end();
    res.json(rows);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ /get-employees:", err);
    res.status(500).json({ error: "Server error", detail: err.message });
  }
});


// ===============================
// üë§ GET /get-patient-full ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ –§–ò–û
// ===============================
app.get("/get-patient-full", async (req, res) => {
  const { lastname, firstname, patronymic, api_key } = req.query;

  if (process.env.API_KEY && api_key !== process.env.API_KEY) {
    return res.status(401).json({ error: "Unauthorized" });
  }

  if (!lastname || !firstname) {
    return res.status(400).json({ error: "–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è" });
  }

  const conn = await mysql.createConnection(dbConfig);

  try {
    const [rows] = await conn.execute(
      `
      SELECT * FROM Patients 
      WHERE ptt_sername = ? 
        AND ptt_name = ?
        AND (ptt_patronymic = ? OR ? IS NULL OR ptt_patronymic IS NULL)
      LIMIT 1
      `,
      [lastname, firstname, patronymic || null, patronymic || null]
    );

    await conn.end();
    
    if (rows.length === 0) {
      return res.status(404).json({ error: "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json(rows[0]);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ /get-patient-full:", err);
    res.status(500).json({ error: "Server error", detail: err.message });
  }
});

// ===============================
// ‚úèÔ∏è PUT /update-patient ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
// ===============================
app.put("/update-patient", async (req, res) => {
  const data = req.body;
  const conn = await mysql.createConnection(dbConfig);

  try {
    await conn.beginTransaction();

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª –¥–ª—è –ë–î
    let genderDB = "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    if (data.gender === "male") genderDB = "–ú—É–∂—Å–∫–æ–π";
    if (data.gender === "female") genderDB = "–ñ–µ–Ω—Å–∫–∏–π";

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    await conn.execute(
      `
      UPDATE Patients SET
        ptt_sername = ?,
        ptt_name = ?,
        ptt_patronymic = ?,
        ptt_birth = ?,
        ptt_gender = ?,
        ptt_tel = ?,
        ptt_address = ?,
        ptt_email = ?,
        ptt_policyOMS = ?,
        ptt_snils = ?,
        ptt_passport_series = ?,
        ptt_passport_number = ?,
        ptt_date_of_issue = ?,
        ptt_disability = ?,
        ptt_allergy = ?,
        ptt_diseases = ?,
        ptt_complaints = ?
      WHERE ptt_id = ?
      `,
      [
        data.lastname,
        data.firstname,
        data.patronymic || null,
        data.birthdate || null,
        genderDB,
        data.phone || null,
        data.address || null,
        data.email || null,
        data.oms || null,
        data.snils || null,
        data.pass_series || null,
        data.pass_number || null,
        data.pass_issued || null,
        data.disability || null,
        data.allergies || null,
        data.comorbid || null,
        data.complaints || null,
        data.patient_id
      ]
    );

    await conn.commit();
    res.status(200).json({ status: "success", message: "–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã" });
  } catch (err) {
    await conn.rollback();
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", detail: err.message });
  } finally {
    await conn.end();
  }
});



// ===============================
// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// ===============================
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ API listening on port ${PORT}`));
